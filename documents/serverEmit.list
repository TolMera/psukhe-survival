.emit('message', { message: 'I really need to eat' });
.emit('message', { message: 'I feel fairly hungry' });
.emit('message', { message: 'I feel a little hungry' });
.emit('message', { message: 'I really need to drink something' });
.emit('message', { message: 'I feel fairly thirsty' });
.emit('message', { message: 'I feel a little thirsty' });
.emit('message', { message: 'I feel like I'm going to suffocate' });
.emit('message', { message: 'I need some air' });
.emit('message', { message: 'I'm holding my breath' });
.emit('message', { message: `I'm feeling a little scratched up` });
.emit('message', { message: `I'm feeling pretty scratched up` });
.emit('message', { message: `I'm am sore` });
.emit('message', { message: `I'm am pretty sore` });
.emit('message', { message: `I'm bleeding a bit` });
.emit('message', { message: `I'm bleeding a lot` });
.emit('message', { message: `I don't know if I'm going to make it` });
.emit('message', { message: `I'm panicking` });
.emit('message', { message: `Please get me out of here` });
.emit('message', { message: `I'm dieing` });
.emit('message', { message: `I see a light` });
.emit('message', { message: 'Someone made a meal out of you' });
.emit('message', { message: 'You died from hunger' });
.emit('message', { message: 'You died from thirst' });
.emit('message', { message: 'You died from an accute lack of oxygen' });
.emit('message', { message: `You have spawned.  Your unique ID is: "${REGEXP}" - you can trade EV points using your ID if you live long enough to collect any` });

.emit('nose', { message: 'You smell nutrients' });
.emit('nose', { message: 'You smell vegetation to the "n"' });
.emit('nose', { message: 'You smell vegetation to the "s"' });
.emit('nose', { message: 'You smell vegetation to the "e"' });
.emit('nose', { message: 'You smell vegetation to the "w"' });
.emit('nose', { message: `I smell something to the "n", it smells ${REGEXP} me` });
.emit('nose', { message: `I smell something to the "s", it smells ${REGEXP} me` });
.emit('nose', { message: `I smell something to the "e", it smells ${REGEXP} me` });
.emit('nose', { message: `I smell something to the "w", it smells ${REGEXP} me` });
.emit('nose', { message: `I smell ${REGEXP} to the "n".` });
.emit('nose', { message: `I smell ${REGEXP} to the "s".` });
.emit('nose', { message: `I smell ${REGEXP} to the "e".` });
.emit('nose', { message: `I smell ${REGEXP} to the "w".` });

.emit('message', { message: `You have become too complex an organism for Mitosis to be successful.` });
.emit('message', { message: `You rip yourself in half, it's a strange experience, but you seem to have survived. The other half is awaiting a soul` });
.emit('message', { message: `You could not find that partner` });
.emit('message', { message: `You begin performing a courtship dance.  Stay close to them while they think about it.` });
.emit('message', { message: `${REGEXP} is performing a cortship display for you.  Do you wish to accept?` });
.emit('message', { message: `You accept - you are now pregnant` });
.emit('message', { message: `${REGEXP} accepted your performance and has become pregnant.` });
.emit('message', { message: `You parthenogenerate - you are now pregnant` });
.emit('message',{message: `You attempt to lay an egg, however you are not pregnant and only succeed in making a mess`,note: 'Yes I know egg fertalization takes place outside the body, but you try coding an entire range of ways for a computer to give birth without cutting a few corners...'});
.emit('message', { message: `You lay an egg.  You are no longer pregnant.  Your egg is awaiting a soul` });
.emit('message', { message: `You attempt to give birth, however you are not pregnant and only succeed in making a mess` });
.emit('message', { message: `You give birth.  You are no longer pregnant.  Your baby is awaiting a soul` });

.emit('message', { message: `You killed ${REGEXP} - Waste not, want not.  Down the hatch.` });
.emit('message', { message: `You were killed by ${REGEXP}.  You survived for ${REGEXP} game ticks` });
.emit('message', { message: `You attacked ${REGEXP}` });
.emit('message', { message: `You were attacked by ${REGEXP}` });
.emit('message', { message: `You attacked ${REGEXP} - you get the feeling that may not have been a good idea.  The impact of your attack makes your body hurt` });
.emit('message', { message: `You were attacked by ${REGEXP} - you barely notice` });
.emit("message", { message: "You found something to eat" });
.emit("message", { message: "There was nothing to eat there" });
.emit("message", { message: "You took a drink" });
.emit("message", { message: "There was nothing to drink there" });
.emit('message', { message: `Congratulations - You have evolved the ${REGEXP} trait. Your EV Point balance is now ${REGEXP} EV Points` });
.emit('message', { message: "Attempt to evolve, exceeded your available EV Points" });
.emit("message", { message: `You have been sent ${REGEXP} EV points by ${REGEXP}` });
.emit("message", { message: `You have sent ${REGEXP} EV points to ${REGEXP}` });
.emit("message", { message: `Your trade was not forfilled because "${REGEXP}" count not be found.` });
.emit("message", { message: `You have been sent ${REGEXP} Health by ${REGEXP}` });
.emit("message", { message: `You have sent ${REGEXP} Health to ${REGEXP}` });
.emit("message", { message: `Your trade was not forfilled because "${REGEXP}" count not be found.` });
.emit("message", { message: `You have been sent ${REGEXP} food by ${REGEXP}` });
.emit("message", { message: `You have sent ${REGEXP} food to ${REGEXP}` });
.emit("message", { message: `Your trade was not forfilled because "${REGEXP}" count not be found.` });
.emit("message", { message: `You have been sent ${REGEXP} water by ${REGEXP}` });
.emit("message", { message: `You have sent ${REGEXP} water to ${REGEXP}` });
.emit("message", { message: `Your trade was not forfilled because "${REGEXP}" count not be found.` });
.emit("message", { message: `You have been sent ${REGEXP} oxygen by ${REGEXP}` });
.emit("message", { message: `You have sent ${REGEXP} oxygen to ${REGEXP}` });
.emit("message", { message: `Your trade was not forfilled because "${REGEXP}" count not be found.` });

.emit('message', 'When making a request to move, a direction must be included.');
.emit('message', 'When making a request to evolce, the name of a trait must be given.');
.emit('message', 'When making a request to attack, a direction must be included.');
.emit('message', 'When making a request to eat, a direction must be included.');
.emit('message', 'When making a request to drink, a direction must be included.');
.emit('message', 'When making a trade, the ID of the person you are trading to must be included.');
.emit('message', 'When making a trade, you need to include details of what you are trading (evPoints, health, hunger, thirst, 
.emit('message', 'When making a trade, you must include an amount to be traded, and it must be a number');
.emit('message', 'When attempting to fertalize something you must supply an ID');


.emit('eyes', { message: 'There is a  bright light surrounding you' });
.emit('eyes', { message: 'You are in darkness' });
.emit('eyes', { message: `The ground to the "n" is higher` });
.emit('eyes', { message: `The ground to the "n" is lower` });
.emit('eyes', { message: `The ground to the "s" is higher` });
.emit('eyes', { message: `The ground to the "s" is lower` });
.emit('eyes', { message: `The ground to the "e" is higher` });
.emit('eyes', { message: `The ground to the "e" is lower` });
.emit('eyes', { message: `The ground to the "w" is higher` });
.emit('eyes', { message: `The ground to the "w" is lower` });
.emit('eyes', { message: `The ground to the "n" has more vegetation` });
.emit('eyes', { message: `The ground to the "n" has less vegetation` });
.emit('eyes', { message: `The ground to the "s" has more vegetation` });
.emit('eyes', { message: `The ground to the "s" has less vegetation` });
.emit('eyes', { message: `The ground to the "e" has more vegetation` });
.emit('eyes', { message: `The ground to the "e" has less vegetation` });
.emit('eyes', { message: `The ground to the "w" has more vegetation` });
.emit('eyes', { message: `The ground to the "w" has less vegetation` });
.emit('eyes', { message: `There is something "n" of here` });
.emit('eyes', { message: `There is something "s" of here` });
.emit('eyes', { message: `There is something "e" of here` });
.emit('eyes', { message: `There is something "w" of here` });
.emit('eyes', { message: `There is something warm "n" of here` });
.emit('eyes', { message: `There is something warm "s" of here` });
.emit('eyes', { message: `There is something warm "e" of here` });
.emit('eyes', { message: `There is something warm "w" of here` });


.emit('message', {message: 'You have earned an Evolution point for saying alive'});
.emit('message', { message: "You're able to evolve", options });


.emit('ears', { message: 'You feel a rumbling' });
.emit('ears', { message: 'You feel a rumbling to the "n"' });
.emit('ears', { message: 'You feel a rumbling to the "s"' });
.emit('ears', { message: 'You feel a rumbling to the "e"' });
.emit('ears', { message: 'You feel a rumbling to the "w"' });
.emit('ears', { message: 'You hear something approaching from the "n"' });
.emit('ears', { message: 'You hear something departing towards the "n"' });
.emit('ears', { message: 'You hear something approaching from the "s"' });
.emit('ears', { message: 'You hear something departing towards the "s"' });
.emit('ears', { message: 'You hear something approaching from the "e"' });
.emit('ears', { message: 'You hear something departing towards the "e"' });
.emit('ears', { message: 'You hear something approaching from the "w"' });
.emit('ears', { message: 'You hear something departing towards the "w"' });
.emit('ears', { message: `Something to the "n" sound like it weighs ${REGEXP}` });
.emit('ears', { message: `Something to the "s" sound like it weighs ${REGEXP}` });
.emit('ears', { message: `Something to the "e" sound like it weighs ${REGEXP}` });
.emit('ears', { message: `Something to the "w" sound like it weighs ${REGEXP}` });
.emit('ears', { message: 'You hear something approaching from the "n"' });
.emit('ears', { message: 'You hear something departing towards the "n"' });
.emit('ears', { message: 'You hear something approaching from the "ne"' });
.emit('ears', { message: 'You hear something departing towards the "ne"' });
.emit('ears', { message: 'You hear something approaching from the "nw"' });
.emit('ears', { message: 'You hear something departing towards the "nw"' });
.emit('ears', { message: 'You hear something approaching from the "s"' });
.emit('ears', { message: 'You hear something departing towards the "s"' });
.emit('ears', { message: 'You hear something approaching from the "se"' });
.emit('ears', { message: 'You hear something departing towards the "se"' });
.emit('ears', { message: 'You hear something approaching from the "sw"' });
.emit('ears', { message: 'You hear something departing towards the "sw"' });
.emit('ears', { message: 'You hear something approaching from the "e"' });
.emit('ears', { message: 'You hear something departing towards the "e"' });
.emit('ears', { message: 'You hear something approaching from the "w"' });
.emit('ears', { message: 'You hear something departing towards the "w"' });